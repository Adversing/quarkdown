package com.quarkdown.core.ast.attributes

import com.quarkdown.core.ast.NestableNode
import com.quarkdown.core.ast.Node
import com.quarkdown.core.ast.attributes.location.LocationTrackableNode
import com.quarkdown.core.ast.base.block.LinkDefinition
import com.quarkdown.core.ast.quarkdown.FunctionCallNode
import com.quarkdown.core.context.toc.TableOfContents
import com.quarkdown.core.document.numbering.NumberingFormat
import com.quarkdown.core.property.AssociatedProperties
import com.quarkdown.core.property.MutableAssociatedProperties
import com.quarkdown.core.property.MutablePropertyContainer
import com.quarkdown.core.property.PropertyContainer

/**
 * Additional information about the node tree, produced by the parsing stage and stored in a [com.quarkdown.core.context.Context].
 * @see com.quarkdown.core.context.Context
 */
interface AstAttributes {
    /**
     * The root node of the tree.
     */
    val root: NestableNode?

    /**
     * Properties associated with nodes in the AST.
     * These properties enrich the AST by storing additional information about the nodes, such as:
     * - [com.quarkdown.core.ast.attributes.location.SectionLocationProperty] for tracking the location of [LocationTrackableNode]s;
     */
    val properties: AssociatedProperties<Node>

    /**
     * @see AssociatedProperties.of on [properties]
     */
    fun of(node: Node): PropertyContainer = properties.of(node)

    /**
     * Labels/identifiers of nodes assigned based on their position,
     * either their own (see [LocationTrackableNode]) or relative to others.
     * The labels are often displayed in a caption.
     * Examples of these nodes are figures and tables.
     * For instance, depending on the document's [NumberingFormat],
     * an element may be labeled as `1.1`, `1.2`, `1.3`, `2.1`, etc.
     * @see com.quarkdown.core.context.hooks.LocationAwareLabelStorerHook for the storing stage
     */
    val positionalLabels: Map<Node, String>

    /**
     * The defined links, which can be referenced by other nodes.
     */
    val linkDefinitions: List<LinkDefinition>

    /**
     * The function calls to be later executed.
     */
    val functionCalls: List<FunctionCallNode>

    /**
     * Whether there is at least one code block.
     * This is used to load the HighlightJS library in HTML rendering only if necessary.
     */
    val hasCode: Boolean

    /**
     * Whether there is at least one math block or inline.
     * This is used to load the KaTeX library in HTML rendering only if necessary.
     */
    val hasMath: Boolean

    /**
     * Whether there is at least one Mermaid diagram.
     * This is used to load the Mermaid library in HTML rendering only if necessary.
     */
    val hasMermaidDiagram: Boolean

    /**
     * The table of contents of all the headings in the document.
     * This is generated by the tree traversal stage of the pipeline.
     */
    val tableOfContents: TableOfContents?

    /**
     * @return a new copied mutable instance of these attributes
     */
    fun toMutable(): MutableAstAttributes
}

/**
 * Writeable attributes that are modified during the parsing process,
 * and carry useful information for the next stages of the pipeline.
 * Storing these attributes while parsing prevents a further visit of the final tree.
 * @param root the root node of the tree. According to the architecture, this is set right after the parsing stage
 * @param linkDefinitions the defined links, which can be referenced by other nodes
 * @param functionCalls the function calls to be later executed
 * @param hasCode whether there is at least one code block.
 * @param hasMath whether there is at least one math block or inline.
 * @see com.quarkdown.core.context.MutableContext
 */
data class MutableAstAttributes(
    override var root: NestableNode? = null,
    override val properties: MutableAssociatedProperties<Node> = MutableAssociatedProperties(),
    override val positionalLabels: MutableMap<Node, String> = mutableMapOf(),
    override val linkDefinitions: MutableList<LinkDefinition> = mutableListOf(),
    override val functionCalls: MutableList<FunctionCallNode> = mutableListOf(),
    override var hasCode: Boolean = false,
    override var hasMath: Boolean = false,
    override var hasMermaidDiagram: Boolean = false,
    override var tableOfContents: TableOfContents? = null,
) : AstAttributes {
    override fun of(node: Node): MutablePropertyContainer = properties.of(node)

    override fun toMutable(): MutableAstAttributes = this.copy()
}
