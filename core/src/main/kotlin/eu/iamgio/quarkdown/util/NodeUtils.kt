package eu.iamgio.quarkdown.util

import eu.iamgio.quarkdown.ast.AstRoot
import eu.iamgio.quarkdown.ast.CriticalContent
import eu.iamgio.quarkdown.ast.InlineContent
import eu.iamgio.quarkdown.ast.NestableNode
import eu.iamgio.quarkdown.ast.Node
import eu.iamgio.quarkdown.ast.PlainTextNode
import eu.iamgio.quarkdown.visitor.node.NodeVisitor

/**
 * Returns a sequence of all nodes in the tree, where [this] is the root node.
 * The sequence is generated by traversing the tree in depth-first order.
 * The root node is excluded from the sequence.
 *
 * Example:
 *
 * Input (nested node tree):
 * ```
 * AstRoot
 *   BlockQuote
 *     Paragraph
 *       Text
 *   Paragraph
 *     Strong
 *       Text
 *     Text
 *     Emphasis
 *       Text
 * ```
 *
 * Output (flattened sequence):
 * ```
 * BlockQuote
 * Paragraph
 * Text
 * Paragraph
 * Strong
 * Text
 * Text
 * Emphasis
 * Text
 * ```
 *
 * @return flattened sequence of children nodes, excluding [this] root node
 */
fun NestableNode.flattenedChildren(): Sequence<Node> =
    sequence {
        // DFS traversal.
        for (child in children) {
            yield(child)
            if (child is NestableNode) {
                yieldAll(child.flattenedChildren())
            }
        }
    }

/**
 * Returns a sequence of all nodes of type [T] in the tree, where [this] is the root node.
 * The sequence is generated by traversing the tree in depth-first order.
 * The root node is excluded from the result.
 * @param T type of nodes to find
 * @return flattened sequence of children nodes of type [T], excluding [this] root node
 * @see flattenedChildren
 */
inline fun <reified T : Node> NestableNode.findAll(): Sequence<T> = flattenedChildren().filterIsInstance<T>()

/**
 * Converts processed [InlineContent] to its plain text representation.
 * For example, the Markdown input `foo **bar `baz`**` has `foo bar baz` as its plain text.
 * @param renderer optional renderer to use to render critical content
 * @return plain text of the inline content
 * @see PlainTextNode
 */
fun InlineContent.toPlainText(renderer: NodeVisitor<CharSequence>? = null): String {
    val builder = StringBuilder()

    // Visits the tree and appends the text content of each node.
    AstRoot(this).flattenedChildren().forEach {
        when {
            it is CriticalContent && renderer != null -> builder.append(renderer.visit(it))
            it is PlainTextNode -> builder.append(it.text)
        }
    }

    return builder.toString()
}
