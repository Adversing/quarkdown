package com.quarkdown.quarkdoc.reader.dokka

import com.quarkdown.quarkdoc.reader.DocsContentExtractor
import com.quarkdown.quarkdoc.reader.DocsParameter
import org.jsoup.Jsoup

/**
 * Extractor of content from Dokka-generated HTML files.
 */
class DokkaHtmlContentExtractor(
    private val html: String,
) : DocsContentExtractor {
    override fun extractContent(): String? =
        Jsoup
            .parse(html)
            .selectFirst("#main .content")
            ?.apply {
                selectFirst(".top-right-position:has(.copy-icon)")?.remove()
            }?.outerHtml()

    /**
     * Converts a row of the parameters table into a [DocsParameter].
     */
    private fun rowToParameter(row: org.jsoup.nodes.Element): DocsParameter? {
        val name = row.children().firstOrNull()?.text() ?: return null
        val content = row.selectFirst(".title")
        val descriptionHtml = content?.html() ?: ""
        val properties = content?.select("dl:first-child li") // Generated by Quarkdoc's AdditionalParameterPropertiesTransformer.

        fun hasProperty(property: String): Boolean = properties?.any { it.text().contains(property, ignoreCase = true) } == true

        return DocsParameter(
            name = name,
            description = descriptionHtml,
            isOptional = hasProperty("optional"),
            isLikelyNamed = hasProperty("named"),
            isLikelyBody = hasProperty("body"),
        )
    }

    override fun extractFunctionParameters(): List<DocsParameter> {
        val table =
            Jsoup
                .parse(html)
                .select("h4:contains(Parameters)")
                .firstOrNull()
                ?.nextElementSibling()
                ?: return emptyList()

        return table
            .getElementsByClass("main-subrow")
            .mapNotNull(::rowToParameter)
    }
}
