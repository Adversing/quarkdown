<!DOCTYPE html>
<html>
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Quarkdown Live Preview</title>
    <style>
        html, body {
            margin: 0;
            padding: 0;
            height: 100%;
            width: 100%;
            overflow: hidden;
            background-color: white;
        }

        .frame-container {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            margin: 0;
            padding: 0;
            overflow: hidden;
            background-color: white;
            transform: translateZ(0);
        }

        .content-frame {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            border: none;
            margin: 0;
            padding: 0;
            overflow: hidden;
            z-index: 999999;
            background-color: white;
            transition: opacity 0.3s ease-in-out;
            will-change: opacity, transform;
            transform: translateZ(0);
            backface-visibility: hidden;
            -webkit-backface-visibility: hidden;
            -webkit-transform-style: preserve-3d;
            transform-style: preserve-3d;
        }

        .hidden {
            opacity: .5;
        }

        .hidden {
            opacity: 0;
            z-index: 999998;
            pointer-events: none;
        }

        .visible {
            opacity: 1;
            z-index: 999999;
            pointer-events: auto;
        }

        .debug .frame-container {
            display: flex;
            flex-direction: row;
        }

        .debug .content-frame {
            position: relative;
            width: 50%;
            border: 2px solid red;
        }

        .debug .hidden {
            opacity: .5;
        }
    </style>
</head>
<body class="debug">
<!-- Double frame buffer makes preview updates smoother -->
<div class="frame-container">
    <iframe id="frame-a" class="content-frame visible" src="[[SRCFILE]]"></iframe>
    <iframe id="frame-b" class="content-frame hidden" src="[[SRCFILE]]"></iframe>
</div>
<script>
    // WebSockets

    /**
     * Starts a WebSocket connection to the specified server and endpoint.
     * @param {string} serverUrl - The server URL (e.g., `localhost:8080`).
     * @param {string} endpoint - The WebSocket endpoint (e.g., `reload`).
     * @param {function} onMessage - The callback function to handle incoming messages.
     * @returns {WebSocket} The WebSocket instance.
     */
    function startWebSocket(serverUrl, endpoint, onMessage) {
        const socket = new WebSocket(`ws://${serverUrl}/${endpoint}`);

        socket.addEventListener('open', () => {
            console.log('Connected to server ' + socket.url);
        });

        socket.addEventListener("message", onMessage);

        socket.addEventListener('close', (event) => {
            console.log(`WebSocket closed: Code=${event.code}, Reason=${event.reason}`);
        });

        socket.addEventListener("error", (error) => {
            console.error("WebSocket error:", error);
        });

        return socket;
    }

    /**
     * Starts the WebSocket that reload the content when a message is received.
     */
    function startReloadWebSocket(serverUrl) {
        startWebSocket(serverUrl, 'reload', reload);
    }

    // Double frame buffering management.

    let activeFrame = 'a';
    let loadingFrame = 'b';

    let scrollX = 0;
    let scrollY = 0;
    let isScrollStickyToBottom = false;

    /**
     * @returns {boolean} Whether the scroll position is at the veryt bottom of the page
     */
    function isScrolledToBottom(activeFrame) {
        const frameWindow = activeFrame.contentWindow;
        if (!frameWindow) return false;

        const scrollableHeight = frameWindow.document.body.scrollHeight;
        const viewportHeight = frameWindow.innerHeight;
        const scrollY = frameWindow.scrollY || 0;

        // If content fits in viewport or scrolled to bottom.
        return scrollableHeight <= viewportHeight || scrollY >= scrollableHeight - viewportHeight - 1;
    }

    /**
     * Synchronizes scroll of the given frame to the stored scroll position.
     * If the user is scrolled to the bottom, keeps them at the bottom after reload.
     * Otherwise, restores the previous scroll position.
     * @param {HTMLIFrameElement} frame - The frame element
     */
    function syncScrollPosition(frame) {
        const y = isScrollStickyToBottom ? frame.contentWindow.document.body.scrollHeight : scrollY;
        frame.contentWindow.scrollTo(scrollX, y);
    }

    /**
     * Sets up scroll event listeners on the active frame to sync scroll position to the buffered frame.
     * @param {HTMLIFrameElement} active - The currently active frame
     */
    function setupScrollSync(active) {
        active.contentWindow.onscroll = () => {
            if (active?.contentWindow?.scrollY) {
                scrollX = active.contentWindow.scrollX;
                scrollY = active.contentWindow.scrollY;
                isScrollStickyToBottom = isScrolledToBottom(active);
            }
        };
    }

    /**
     * Toggles the visibility class of a frame
     * @param {HTMLElement} frame - The frame element
     * @param {boolean} isVisible - Whether the frame should be visible
     */
    function setFrameVisibility(frame, isVisible) {
        if (isVisible) {
            frame.classList.remove('hidden');
            frame.classList.add('visible');
        } else {
            frame.classList.remove('visible');
            frame.classList.add('hidden');
        }
    }

    /**
     * Reloads the preview using double buffering to prevent flickering.
     * Ensures the frame is properly prepared before reloading.
     */
    function reload() {
        // Determine which frame to reload (the currently hidden one)
        loadingFrame = activeFrame === 'a' ? 'b' : 'a';
        const frameToReload = document.getElementById(`frame-${loadingFrame}`);

        // Make sure the frame to reload is properly hidden.
        setFrameVisibility(frameToReload, false);

        // Set up the load event before reloading.
        frameToReload.onload = swapFrames;

        // Reload the hidden frame.
        frameToReload?.contentWindow?.location?.reload();
    }

    /**
     * Swaps the visibility of the frames after the hidden one has loaded and synchronizes scroll position between frames.
     */
    function swapFrames() {
        const currentFrame = document.getElementById(`frame-${activeFrame}`);
        const newFrame = document.getElementById(`frame-${loadingFrame}`);

        // Reset handlers.
        currentFrame.contentWindow.onscroll = null;
        newFrame.contentWindow.onscroll = null;

        // Swap frame visibility.
        setFrameVisibility(newFrame, true);
        setFrameVisibility(currentFrame, false);

        // Update the active frame.
        activeFrame = loadingFrame;

        // Set up scroll synchronization.
        // TODO avoid delay, look for callbacks.
        setTimeout(() => {
            syncScrollPosition(newFrame);
            setupScrollSync(newFrame);
        }, 100);

        newFrame.onload = null;
    }
</script>
<script>startReloadWebSocket("localhost:[[SERVERPORT]]")</script>
</body>
